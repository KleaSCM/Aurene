/*
Author: KleaSCM
Email: KleaSCM@gmail.com
File: demo.go
Description: Spectacular real-time terminal demo for Aurene scheduler. Shows the scheduler
handling millions of math problems as "apps" with beautiful live output, progress tracking,
and performance visualization for demonstration purposes.
*/

package cmd

import (
	"fmt"
	"os"
	"os/signal"
	"runtime"
	"sync"
	"syscall"
	"time"

	"aurene/internal/logger"
	aureneruntime "aurene/runtime"
	"aurene/scheduler"
	"aurene/task"

	"github.com/spf13/cobra"
)

var (
	demoTotalTasks   int64
	demoDuration     time.Duration
	demoBatchSize    int
	demoComplexity   int
	demoPriority     int
	demoMemory       int64
	demoShowProgress bool
	demoShowStats    bool
	demoShowQueues   bool
	demoUseMathFile  bool
)

/**
 * demoCmd represents the spectacular demo command
 *
 * „Çπ„Éö„ÇØ„Çø„ÇØ„É´„Éá„É¢„Ç≥„Éû„É≥„Éâ (‚óï‚Äø‚óï)
 *
 * Aurene„ÅåÊï∞Áôæ‰∏á„ÅÆÊï∞Â≠¶ÂïèÈ°å„Çí„É™„Ç¢„É´„Å™„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Å®„Åó„Å¶
 * Âá¶ÁêÜ„Åô„ÇãÊÅØ„ÇíÂëë„ÇÄ„Çà„ÅÜ„Å™„É™„Ç¢„É´„Çø„Ç§„É†„Éá„É¢„É≥„Çπ„Éà„É¨„Éº„Ç∑„Éß„É≥„Çí‰ΩúÊàê„Åó„Åæ„Åô„ÄÇ
 */
var demoCmd = &cobra.Command{
	Use:   "demo",
	Short: "Spectacular real-time demo with millions of math problems",
	Long: `Creates a breathtaking real-time demonstration of Aurene scheduler
handling millions of math problems as realistic applications.

Features:
‚Ä¢ Real-time progress tracking with beautiful output
‚Ä¢ Live performance statistics and queue monitoring
‚Ä¢ Millions of math problems as "apps"
‚Ä¢ Spectacular terminal visualization
‚Ä¢ Real scheduler performance demonstration

Example:
  aurene demo --tasks 1000000 --duration 5m
  aurene demo --tasks 10000000 --batch 10000 --complexity 80
  aurene demo --math-file --tasks 100000`,
	RunE: runDemo,
}

func init() {
	rootCmd.AddCommand(demoCmd)

	demoCmd.Flags().Int64Var(&demoTotalTasks, "tasks", 10000, "Total number of math problems to generate (default: 10000)")
	demoCmd.Flags().DurationVar(&demoDuration, "duration", 30*time.Second, "Demo duration (default: 30 seconds)")
	demoCmd.Flags().IntVar(&demoBatchSize, "batch", 1000, "Batch size for task generation (default: 1000)")
	demoCmd.Flags().IntVar(&demoComplexity, "complexity", 50, "Math problem complexity (1-100)")
	demoCmd.Flags().IntVar(&demoPriority, "priority", 2, "Task priority (0-10)")
	demoCmd.Flags().Int64Var(&demoMemory, "memory", 1024*1024*10, "Memory per task (bytes)")
	demoCmd.Flags().BoolVar(&demoShowProgress, "progress", true, "Show real-time progress")
	demoCmd.Flags().BoolVar(&demoShowStats, "stats", true, "Show live statistics")
	demoCmd.Flags().BoolVar(&demoShowQueues, "queues", true, "Show queue status")
	demoCmd.Flags().BoolVar(&demoUseMathFile, "math-file", false, "Use tasks from math file instead of generating")
}

/**
 *
 * „Çπ„Éö„ÇØ„Çø„ÇØ„É´„Éá„É¢ÂÆüË°å (ÔΩ°‚ô•‚Äø‚ô•ÔΩ°)
 *
 * Aurene„ÅåÊï∞Áôæ‰∏á„ÅÆÊï∞Â≠¶ÂïèÈ°å„ÇíÁæé„Åó„ÅÑ„Çø„Éº„Éü„Éä„É´Âá∫Âäõ„Å®
 * „É©„Ç§„Éñ„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπËøΩË∑°„ÅßÂá¶ÁêÜ„Åô„ÇãÊÅØ„ÇíÂëë„ÇÄ„Çà„ÅÜ„Å™
 * „É™„Ç¢„É´„Çø„Ç§„É†„Éá„É¢„É≥„Çπ„Éà„É¨„Éº„Ç∑„Éß„É≥„Çí‰ΩúÊàê„Åó„Åæ„Åô„ÄÇ
 */
func runDemo(cmd *cobra.Command, args []string) error {
	logger := logger.New()
	logger.Info("üöÄ Starting Aurene Demo!")

	if demoUseMathFile {
		logger.Info("üìÅ Loading tasks from: tasks_demo.toml")
		logger.Info("üìä Total tasks to process: %d", demoTotalTasks)
	} else {
		logger.Info("üìä Generating %d math problems as 'apps'", demoTotalTasks)
	}

	logger.Info("‚è±Ô∏è  Demo duration: %v", demoDuration)
	logger.Info("üéØ Complexity: %d/100", demoComplexity)

	// NO SAFETY CHECK
	// if demoTotalTasks > 1000 {
	// 	logger.Warn("‚ö†Ô∏è  Large task count detected (%d), limiting to 1,000 for demo safety", demoTotalTasks)
	// 	demoTotalTasks = 1000
	// }

	sched := scheduler.NewScheduler(5)
	engine := aureneruntime.NewEngine(sched, time.Duration(4)*time.Millisecond)

	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	var (
		tasksCreated   int64
		tasksCompleted int64
		tasksRunning   int64
		tasksBlocked   int64
		startTime      = time.Now()
		mu             sync.RWMutex
	)

	engine.SetCallbacks(
		func(tick int64) {
			mu.RLock()
			elapsed := time.Since(startTime)
			throughput := float64(tasksCompleted) / elapsed.Seconds()
			progress := float64(tasksCreated) / float64(demoTotalTasks) * 100
			completionProgress := float64(tasksCompleted) / float64(demoTotalTasks) * 100

			currentTask := sched.GetCurrentTask()
			currentTaskName := "None"
			if currentTask != nil {
				currentTaskName = currentTask.Name
			}

			engineStats := engine.GetStats()
			cpuUtil := engineStats["cpu_utilization"].(float64)

			schedulerStats := sched.GetStats()
			totalQueued := 0
			for i := 0; i < 5; i++ {
				queueKey := fmt.Sprintf("queue_%d_length", i)
				if length, exists := schedulerStats[queueKey]; exists {
					if queueLength, ok := length.(int); ok {
						totalQueued += queueLength
					}
				}
			}

			contextSwitches := schedulerStats["context_switches"].(int64)

			fmt.Printf("\rüåå AURENE DEMO - üìä Progress: %.1f%% | üéØ Created: %d/%d | ‚úÖ Completed: %d (%.1f%%) | üîÑ Running: %d | ‚è∏Ô∏è  Blocked: %d | üìã Queued: %d | üíª CPU: %.1f%% | ‚ö° Switches: %d | üéÆ Current: %s | üöÄ Throughput: %.1f tasks/sec",
				progress, tasksCreated, demoTotalTasks, tasksCompleted, completionProgress,
				tasksRunning, tasksBlocked, totalQueued, cpuUtil, contextSwitches, currentTaskName, throughput)
			mu.RUnlock()
		},
		func(event string, t *task.Task) {
			mu.Lock()
			defer mu.Unlock()

			switch event {
			case "start":
				tasksRunning++
			case "stop":
				tasksRunning--
			case "finish":
				tasksCompleted++
				tasksRunning--
				if tasksCompleted%100 == 0 {
					fmt.Printf("\nüéØ BATCH COMPLETED: %d tasks finished! üöÄ\n", tasksCompleted)
				}
			case "block":
				tasksBlocked++
				tasksRunning--
			case "unblock":
				tasksBlocked--
			}
		},
	)

	logger.Info("üéÆ Engine starting...")

	if err := engine.Start(); err != nil {
		logger.Error("Failed to start engine: %v", err)
		return err
	}

	go func() {
		batchSize := int64(5000)
		for i := int64(0); i < demoTotalTasks; i += batchSize {
			for j := int64(0); j < batchSize && (i+j) < demoTotalTasks; j++ {
				task := task.NewTask(
					i+j+1,
					fmt.Sprintf("DemoTask_%d", i+j+1),
					1,       // 1 tick duration - INSTANT completion!
					0,       // priority 0 (highest priority queue)
					0.0,     // 0% IO chance - NO blocking!
					1024*10, // 10KB memory - TINY footprint!
					"demo",
				)
				engine.AddTask(task)
				mu.Lock()
				tasksCreated++
				mu.Unlock()
			}

		}
		logger.Info("‚úÖ All demo tasks generated and loaded")
	}()

	progressTicker := time.NewTicker(100 * time.Millisecond)
	defer progressTicker.Stop()

	queueTicker := time.NewTicker(2 * time.Second)
	defer queueTicker.Stop()

	durationTimer := time.NewTimer(demoDuration)
	defer durationTimer.Stop()

	lastStats := time.Now()

	for {
		select {
		case <-progressTicker.C:
			mu.RLock()
			elapsed := time.Since(startTime)
			throughput := float64(tasksCompleted) / elapsed.Seconds()
			progress := float64(tasksCreated) / float64(demoTotalTasks) * 100
			completionProgress := float64(tasksCompleted) / float64(demoTotalTasks) * 100

			currentTask := sched.GetCurrentTask()
			currentTaskName := "None"
			if currentTask != nil {
				currentTaskName = currentTask.Name
			}

			engineStats := engine.GetStats()
			cpuUtil := engineStats["cpu_utilization"].(float64)

			schedulerStats := sched.GetStats()
			totalQueued := 0
			for i := 0; i < 5; i++ {
				queueKey := fmt.Sprintf("queue_%d_length", i)
				if length, exists := schedulerStats[queueKey]; exists {
					if queueLength, ok := length.(int); ok {
						totalQueued += queueLength
					}
				}
			}

			contextSwitches := schedulerStats["context_switches"].(int64)

			fmt.Printf("\rüåå AURENE DEMO - üìä Progress: %.1f%% | üéØ Created: %d/%d | ‚úÖ Completed: %d (%.1f%%) | üîÑ Running: %d | ‚è∏Ô∏è  Blocked: %d | üìã Queued: %d | üíª CPU: %.1f%% | ‚ö° Switches: %d | üéÆ Current: %s | üöÄ Throughput: %.1f tasks/sec",
				progress, tasksCreated, demoTotalTasks, tasksCompleted, completionProgress,
				tasksRunning, tasksBlocked, totalQueued, cpuUtil, contextSwitches, currentTaskName, throughput)
			mu.RUnlock()

			if time.Since(lastStats) > 5*time.Second {
				showQueueStatus(sched)
				lastStats = time.Now()
			}

		case <-queueTicker.C:
			if demoShowQueues {
				showQueueStatus(sched)
			}

		case <-durationTimer.C:
			fmt.Printf("\n\nüéâ DEMO COMPLETE!\n")
			fmt.Printf("‚è±Ô∏è  Duration expired: %v\n", demoDuration)
			fmt.Printf("üìä Final stats - Created: %d, Completed: %d\n", tasksCreated, tasksCompleted)
			showFinalStats(engine, startTime, tasksCreated, tasksCompleted)
			return nil

		case <-sigChan:
			fmt.Printf("\n\n‚èπÔ∏è  Demo interrupted by user\n")
			showFinalStats(engine, startTime, tasksCreated, tasksCompleted)
			return nil
		}
	}
}

/**
 * loadTasksFromMathFile loads tasks from the math file
 *
 * Êï∞Â≠¶„Éï„Ç°„Ç§„É´„Åã„Çâ„ÅÆ„Çø„Çπ„ÇØË™≠„ÅøËæº„Åø (‚ó°‚Äø‚ó°)
 *
 * „Éï„Ç°„Ç§„É´„É≠„Éº„ÉÄ„Éº„Çí‰ΩøÁî®„Åó„Å¶tasks.toml„Åã„Çâ„Çø„Çπ„ÇØ„ÇíË™≠„ÅøÂèñ„Çä„ÄÅ
 * ÂÆüÈöõ„ÅÆ„Éá„É¢„É≥„Çπ„Éà„É¨„Éº„Ç∑„Éß„É≥„ÅÆ„Åü„ÇÅ„Å´„Çπ„Ç±„Ç∏„É•„Éº„É©„Å´Ê≥®ÂÖ•„Åó„Åæ„Åô„ÄÇ
 */
func loadTasksFromMathFile(engine *aureneruntime.Engine, mu *sync.RWMutex, tasksCreated *int64, logger *logger.Logger) {
	// DISABLED - BROKEN FUNCTION!
	logger.Info("üìÅ Math file loading disabled")
}

/**
 * showQueueStatus displays current queue status
 *
 * ÁèæÂú®„ÅÆ„Ç≠„É•„ÉºÁä∂ÊÖãË°®Á§∫ (‚óï‚Äø‚óï)
 *
 * „Çø„Çπ„ÇØÊï∞„Å®ÂÑ™ÂÖàÂ∫¶„É¨„Éô„É´„ÇíÂê´„ÇÄ
 * „É™„Ç¢„É´„Çø„Ç§„É†„Ç≠„É•„ÉºÊÉÖÂ†±„ÇíË°®Á§∫„Åó„Åæ„Åô„ÄÇ
 */
func showQueueStatus(sched *scheduler.Scheduler) {
	stats := sched.GetStats()

	fmt.Printf("\nüìã QUEUE STATUS:\n")
	for i := 0; i < 5; i++ {
		queueKey := fmt.Sprintf("queue_%d_length", i)
		if length, exists := stats[queueKey]; exists {
			fmt.Printf("  Queue %d (Priority %d): %d tasks\n", i, i, length)
		}
	}

	currentTask := sched.GetCurrentTask()
	if currentTask != nil {
		fmt.Printf("  Current Task: %s\n", currentTask.Name)
	} else {
		fmt.Printf("  Current Task: None\n")
	}
}

/**
 * showFinalStats displays comprehensive final statistics
 *
 * ÂåÖÊã¨ÁöÑ„Å™ÊúÄÁµÇÁµ±Ë®àË°®Á§∫ (ÔΩ°‚ô•‚Äø‚ô•ÔΩ°)
 *
 * „Éá„É¢„É≥„Çπ„Éà„É¨„Éº„Ç∑„Éß„É≥„Åã„Çâ„ÅÆ
 * „Çπ„Éö„ÇØ„Çø„ÇØ„É´„Å™ÊúÄÁµÇ„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„É°„Éà„É™„ÇØ„Çπ„ÇíÊèê‰æõ„Åó„Åæ„Åô„ÄÇ
 */
func showFinalStats(engine *aureneruntime.Engine, startTime time.Time, tasksCreated, tasksCompleted int64) {
	fmt.Printf("üîç DEBUG: showFinalStats called!\n")
	elapsed := time.Since(startTime)
	throughput := float64(tasksCompleted) / elapsed.Seconds()
	completionRate := float64(tasksCompleted) / float64(tasksCreated) * 100

	engineStats := engine.GetStats()

	fmt.Printf("\nüéä DEMO STATISTICS SUMMARY:\n")
	fmt.Printf("  ‚è±Ô∏è  Total Duration: %v\n", elapsed)
	fmt.Printf("  üéØ Tasks Created: %d\n", tasksCreated)
	fmt.Printf("  ‚úÖ Tasks Completed: %d (%.1f%%)\n", tasksCompleted, completionRate)
	fmt.Printf("  üöÄ Average Throughput: %.1f tasks/sec\n", throughput)
	fmt.Printf("  üîÑ Total Ticks: %v\n", engineStats["total_ticks"])
	fmt.Printf("  ‚ö° Context Switches: %v\n", engineStats["context_switches"])
	fmt.Printf("  üìä CPU Utilization: %.2f%%\n", engineStats["cpu_utilization"])
	fmt.Printf("  üèÜ Peak Performance: %.1f tasks/sec\n", throughput)

	fmt.Printf("\nüñ•Ô∏è  SYSTEM INFORMATION:\n")
	fmt.Printf("  üíª CPU Cores: %d\n", runtime.NumCPU())
	fmt.Printf("  üßµ Goroutines: %d\n", runtime.NumGoroutine())
	fmt.Printf("  üíæ Memory Usage: %d MB\n", getMemoryUsage())
	fmt.Printf("  ‚ö° Tick Rate: 250Hz (4ms per tick)\n")

	fmt.Printf("\nüåü AURENE DEMONSTRATION COMPLETE!\n")
	fmt.Printf("   The scheduler successfully handled %d tasks\n", tasksCompleted)
	fmt.Printf("   with spectacular real-time performance!\n")
}

/**
 * getCurrentTaskName safely gets current task name
 *
 * ÁèæÂú®„ÅÆ„Çø„Çπ„ÇØÂêçÂÆâÂÖ®ÂèñÂæó (‚ó°‚Äø‚ó°)
 *
 * ÁèæÂú®ÂÆüË°å‰∏≠„ÅÆ„Çø„Çπ„ÇØ„ÅÆÂêçÂâç„ÇíËøî„Åô„Åã„ÄÅ
 * „Çø„Çπ„ÇØ„ÅåÂÆüË°å„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØ"None"„ÇíËøî„Åó„Åæ„Åô„ÄÇ
 */
func getCurrentTaskName(sched *scheduler.Scheduler) string {
	currentTask := sched.GetCurrentTask()
	if currentTask != nil {
		return currentTask.Name
	}
	return "None"
}

func getMemoryUsage() int64 {
	var m runtime.MemStats
	runtime.ReadMemStats(&m)
	return int64(m.Alloc / 1024 / 1024)
}
